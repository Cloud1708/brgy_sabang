<?php
require_once __DIR__.'/../inc/db.php';
require_once __DIR__.'/../inc/auth.php';
require_role(['Admin']);
if (session_status() === PHP_SESSION_NONE) session_start();

header('Content-Type: application/json; charset=utf-8');

// Force JSON-safe error handling
set_error_handler(function($severity, $message, $file, $line) {
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'error'   => "PHP Error: $message",
        'file'    => $file,
        'line'    => $line
    ]);
    exit;
});
set_exception_handler(function($ex) {
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'error'   => "Exception: ".$ex->getMessage()
    ]);
    exit;
});

function fail($msg, $code = 400){
    http_response_code($code);
    echo json_encode(['success'=>false,'error'=>$msg]);
    exit;
}

if ($_SERVER['REQUEST_METHOD'] !== 'POST') fail('Invalid method',405);
if (empty($_POST['csrf_token']) || empty($_SESSION['csrf_token']) || !hash_equals($_SESSION['csrf_token'], $_POST['csrf_token'])) {
    fail('CSRF validation failed',419);
}

$role     = $_POST['role'] ?? '';
if (!in_array($role, ['BHW','BNS'], true)) fail('Invalid role');

$first    = trim($_POST['first_name'] ?? '');
$last     = trim($_POST['last_name'] ?? '');
$barangay = trim($_POST['barangay'] ?? '');
$username = trim($_POST['username'] ?? '');
$email    = trim($_POST['email'] ?? '');
$password = trim($_POST['password'] ?? '');

if ($first==='' || $last==='' || $barangay==='' || $username==='') fail('Missing required fields');

if ($password === '') {
    // Simple autogenerated password (ensure user resets later)
    $password = substr(bin2hex(random_bytes(6)),0,10).'@A1';
}
$passHash = password_hash($password, PASSWORD_DEFAULT);

$admin_id = (int)$_SESSION['user_id'];

/*
  Portable approach without relying on mysqli_stmt::get_result():
  1. Prepare CALL statement
  2. Bind parameters
  3. Execute
  4. Use store_result + bind_result for the SELECT inside the procedure
*/
$stmt = $mysqli->prepare("CALL CreateStaffAccount(?,?,?,?,?,?,?,?)");
if (!$stmt) fail('DB prepare failed: '.$mysqli->error,500);

$stmt->bind_param(
    'sssssssi',
    $username,
    $email,
    $passHash,
    $first,
    $last,
    $role,
    $barangay,
    $admin_id
);

if (!$stmt->execute()) {
    if (strpos(strtolower($stmt->error), 'duplicate') !== false) {
        fail('Username or email already exists.',409);
    }
    fail('Execution error: '.$stmt->error,500);
}

// Because stored procedures can return multiple result sets, we handle the first one.
$new_user_id = null;
$message = null;

do {
    if ($result = $stmt->store_result()) {
        // Check if this result set has two columns (new_user_id/message) as expected.
        if ($stmt->num_rows > 0 && $stmt->field_count === 2) {
            $stmt->bind_result($new_user_id, $message);
            $stmt->fetch();
        }
    }
} while ($stmt->more_results() && $stmt->next_result());

$stmt->close();

// Basic sanity fallback
if (!$new_user_id) {
    // Try to look up just-created user by username (in case get_result logic failed silently)
    $lookup = $mysqli->prepare("SELECT user_id FROM users WHERE username=? LIMIT 1");
    if ($lookup) {
        $lookup->bind_param('s',$username);
        $lookup->execute();
        $lookup->bind_result($uid);
        if ($lookup->fetch()) $new_user_id = $uid;
        $lookup->close();
    }
}

echo json_encode([
    'success'      => true,
    'message'      => ($message ?: $role.' account created successfully')." Temp password: ".$password,
    'new_user_id'  => $new_user_id
]);